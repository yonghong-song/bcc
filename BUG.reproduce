(1). Recent linux distrubition (e.g., fedora 27)
(2). Build a llvm locally with latest llvm/clang trunk. I am using
     the following cmake command:
     cmake -G "Unix Makefiles" -DLLVM_TARGETS_TO_BUILD="BPF;X86" \
       -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install ..
(3). Checkout bcc and then this commit
        =========
        steps to reproduce a bcc segfault with embed-source on

        BUG.reproduce:  how to reproduce the issues
        BUG.stacktrace: seg fault stack trace
        BUG.ir:         the IR generated by clang compiler invocation
        BUG.cc1_flags:  cc1 flags generated by the Driver

        Other files which may help understand bcc MCJIT framework:
           src/cc/frontends/clang/loader.cc:
              clang Driver Invocation and compilerInvocation
           src/cc/bpf_module.cc:
              llvm PassManager and ExecutionEngine finalizeObject

        Signed-off-by: Yonghong Song <yhs@fb.com>
        =========
       at branch bcc-clang-hack.
     Following bcc/INSTALL.md (close to end of the document)
       to manually build bcc
(4). at bcc/tools directory, run the following command:
     sudo ./trace.py 'SyS_nanosleep'   # for 4.17 or earlier linux
     sudo ./trace.py '__x64_sys_nanosleep'  # for 4.18 or later linux

Results:
========
You will see a segfault.
The file BUG.cc1_flags shows the cc1 flags generated by the driver
and passed to llvm. Note that "-g -gdwarf-5 -gembed-source" is added
to the compilation flags.

Analysis:
=========
After some analysis, I found that in IR the following DIFile does not
have source code:
   !32 = !DIFile(filename: "/virtual/main.c", directory: "/usr/src/kernels/4.11.3-70_fbk18_4116_g1cf3f1a0ca4f")

And I traced this to a clang issue. After fixing it, the seg fault is gone
and the IR contains source codes for all DIFile's.
